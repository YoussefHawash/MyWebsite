# Generated by Django 3.2.6 on 2024-10-21 23:02

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='creator',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=48)),
                ('pic', models.ImageField(blank=True, upload_to='user_pics/')),
                ('about', models.TextField(max_length=300)),
                ('address', models.CharField(max_length=150)),
                ('git', models.URLField()),
                ('twitter', models.URLField()),
                ('linkedin', models.URLField()),
                ('email', models.CharField(max_length=72)),
                ('phone', models.CharField(max_length=72)),
                ('projectsdone', models.IntegerField()),
                ('firstaboutline', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='exp',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('position', models.CharField(max_length=150)),
                ('company', models.CharField(max_length=150)),
                ('startdate', models.IntegerField()),
                ('enddate', models.CharField(max_length=50)),
                ('location', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='service',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('icon', models.FileField(upload_to='icons/')),
                ('firstline', models.CharField(max_length=72)),
                ('secondline', models.CharField(max_length=72)),
                ('thirdline', models.CharField(max_length=72)),
            ],
        ),
        migrations.CreateModel(
            name='skill',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=150)),
                ('rate', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='website',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('views', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='project',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=48)),
                ('Img', models.ImageField(upload_to='Project_images/')),
                ('description', models.TextField()),
                ('git', models.URLField(blank=True)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='bio',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('smalltxt', models.CharField(max_length=24)),
                ('bigtxt', models.CharField(max_length=24)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.creator')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
